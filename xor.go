// *********************************************************************************************************************
// ***                                          G O L A N D   S T U D I O S                                          ***
// *********************************************************************************************************************
// * Auth: ColeCai
// * Date: 2022/12/13 9:44
// * File: xor.go
// * Proj: crypto
// * Pack: crypto
// * Ides: GoLand
// *--------------------------------------------------------------------------------------------------------------------
// * Functions:
// * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

package crypto

type XORCryptor struct {
	key []byte
}

// *********************************************************************************************************************
// * SUMMARY:
// * WARNING:
// * HISTORY:
// *    -create: 2022/12/13 09:44:05 ColeCai.
// *********************************************************************************************************************
func NewXORCryptor(key []byte) *XORCryptor {
	return &XORCryptor{key: key}
}

// *********************************************************************************************************************
// * SUMMARY:
// * WARNING:
// * HISTORY:
// *    -create: 2022/12/13 09:45:47 ColeCai.
// *********************************************************************************************************************
func (x *XORCryptor) Encrypt(src []byte) ([]byte, error) {
	en := make([]byte, len(src))
	length := len(x.key)
	for k, v := range src {
		en[k] = v ^ x.key[k%length]
	}
	return en, nil
}

// *********************************************************************************************************************
// * SUMMARY:
// * WARNING:
// * HISTORY:
// *    -create: 2022/12/13 09:47:44 ColeCai.
// *********************************************************************************************************************
func (x *XORCryptor) Decrypt(src []byte) ([]byte, error) {
	en := make([]byte, len(src))
	length := len(x.key)
	for k, v := range src {
		en[k] = v ^ x.key[k%length]
	}
	return en, nil
}
